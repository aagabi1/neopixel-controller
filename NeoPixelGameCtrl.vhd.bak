-- SCOMP peripheral that gets button input

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

entity NeoPixelGameCtrl is 

	port (
		resetn   		: in std_logic ;
		io_write 		: in std_logic ;
		cs       		: in std_logic ;
		upbutton			: in std_logic;
		downbutton		: in std_logic;
		data				: out std_logic_vector(15 downto 0);
		
		-- clock input
		clk_10Hz  : in    std_logic
	);

end entity;

architecture internals of NeoPixelGameCtrl is

	Type state_type is (idle, start_up, start_down, up, down);

	signal state				: state_type;
	signal btn_state			: std_logic_vector(1 DOWNTO 0);
	signal direction			: std_logic_vector(15 downto 0);
	
begin

	data <= "ZZZZZZZZZZZZZZZZ" when (cs='0' or io_write='1') else direction;
	
	process (resetn, clk_10M, cs, io_write)
	begin
		-- reset to a known value
		if (resetn ='0' OR (io_write and cs) = '1') then
			state <= idle;

		elsif (rising_edge(clk_10Hz)) then
			
			case state is
				when idle =>
					case btn_state is
						when "10" => state <= start_up;
						when "01" => state <= start_down;
						when others => state <= idle;
					end case;
						
				when start_up =>
					case btn_state is
						when "00" => state <= up;
						when others => state <= start_up;
					end case;
					
				when start_down =>
					case btn_state is
						when "00" => state <= down;
						when others => state <= start_down;
					end case;
				when up => state <= up;
				when down => state <= down;
				
			end case;
			
		end if;
	end process;
	
	with state select direction <=
		x"0001" when up,
		x"1111" when down,
		x"0000" when others;

	btn_state <= upbutton & downbutton;
	
	

end internals;